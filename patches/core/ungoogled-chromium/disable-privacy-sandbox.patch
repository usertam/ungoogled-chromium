--- a/chrome/browser/resources/settings/privacy_page/privacy_page.html
+++ b/chrome/browser/resources/settings/privacy_page/privacy_page.html
@@ -80,19 +80,6 @@
             sub-label="$i18n{permissionsPageDescription}"
             on-click="onPermissionsPageClick_"
             role-description="$i18n{subpageArrowRoleDescription}"></cr-link-row>
-        <cr-link-row id="privacySandboxLinkRow"
-            start-icon="settings20:experiment"
-            class="hr"
-            label="$i18n{privacySandboxTitle}"
-            sub-label="[[computePrivacySandboxSublabel_(
-                prefs.privacy_sandbox.apis_enabled.*)]]"
-            on-click="onPrivacySandboxClick_"
-            external
-            role-description="$i18n{subpageArrowRoleDescription}">
-        </cr-link-row>
-        <a id="privacySandboxLink" href="privacySandbox"
-            target="_blank" tabindex="-1" aria-disabled="true"
-            role="none"></a>
       </div>
 
 <if expr="use_nss_certs">
--- a/components/privacy_sandbox/privacy_sandbox_prefs.cc
+++ b/components/privacy_sandbox/privacy_sandbox_prefs.cc
@@ -36,7 +36,7 @@ namespace privacy_sandbox {
 
 void RegisterProfilePrefs(PrefRegistrySimple* registry) {
   registry->RegisterBooleanPref(
-      prefs::kPrivacySandboxApisEnabled, true,
+      prefs::kPrivacySandboxApisEnabled, false,
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
   registry->RegisterBooleanPref(prefs::kPrivacySandboxApisEnabledV2, false);
   registry->RegisterBooleanPref(
--- a/components/privacy_sandbox/privacy_sandbox_settings.cc
+++ b/components/privacy_sandbox/privacy_sandbox_settings.cc
@@ -263,13 +263,7 @@ std::vector<GURL> PrivacySandboxSettings
 }
 
 bool PrivacySandboxSettings::IsPrivacySandboxEnabled() const {
-  // Which preference is consulted is dependent on whether release 3 of the
-  // settings is available.
-  if (!base::FeatureList::IsEnabled(
-          privacy_sandbox::kPrivacySandboxSettings3)) {
-    return pref_service_->GetBoolean(prefs::kPrivacySandboxApisEnabled);
-  }
-  return pref_service_->GetBoolean(prefs::kPrivacySandboxApisEnabledV2);
+  return false;
 }
 
 void PrivacySandboxSettings::SetPrivacySandboxEnabled(bool enabled) {
