From d32e222a2706cb59f9855b9cf4330f88d1af5435 Mon Sep 17 00:00:00 2001
From: Jan Engelhardt <jengelh@inai.de>
Date: Thu, 2 Apr 2015 12:44:23 +0200
Subject: [PATCH 41/66] Remove EV certificates

The team chose to let EV certificates appear just like normal
certificates. The web of trust is considered a failure in itself, so
do not give users a false sense of extra security with EV certs.
Instead, let them appear just like regular ones.
---
 net/cert/ev_root_ca_metadata.cc | 14 +++++++++++++-
 1 file changed, 13 insertions(+), 1 deletion(-)

--- a/net/tools/root_store_tool/root_store_tool.cc
+++ b/net/tools/root_store_tool/root_store_tool.cc
@@ -171,72 +171,19 @@ bool WriteRootCppFile(const RootStore& r
 // Returns true if file was correctly written, false otherwise.
 bool WriteEvCppFile(const RootStore& root_store,
                     const base::FilePath cpp_path) {
-  // There should be at least one EV root.
-  CHECK_GT(root_store.trust_anchors_size(), 0);
-
   std::string string_to_write =
       "// This file is auto-generated, DO NOT EDIT.\n\n"
-      "static const EVMetadata kEvRootCaMetadata[] = {\n";
-
-  for (auto& anchor : root_store.trust_anchors()) {
-    // Every trust anchor at this point should have a DER.
-    CHECK(!anchor.der().empty());
-
-    std::string sha256_hash = crypto::SHA256HashString(anchor.der());
-
-    // Begin struct. Assumed type of EVMetadata:
-    //
-    // struct EVMetadata {
-    //  static const size_t kMaxOIDsPerCA = 2;
-    //  SHA256HashValue fingerprint;
-    //  const base::StringPiece policy_oids[kMaxOIDsPerCA];
-    // };
-    string_to_write += "    {\n";
-    string_to_write += "        {{";
-
-    int wrap_count = 0;
-    for (auto c : sha256_hash) {
-      if (wrap_count != 0) {
-        if (wrap_count % 11 == 0) {
-          string_to_write += ",\n          ";
-        } else {
-          string_to_write += ", ";
-        }
-      }
-      base::StringAppendF(&string_to_write, "0x%02x", static_cast<uint8_t>(c));
-      wrap_count++;
-    }
-
-    string_to_write += "}},\n";
-    string_to_write += "        {\n";
-
-    // struct expects exactly two policy oids, and we can only support 1 or 2
-    // policy OIDs. These checks will need to change if we ever merge the EV and
-    // Chrome Root Store textprotos.
-    const int kMaxPolicyOids = 2;
-    int oids_size = anchor.ev_policy_oids_size();
-    std::string hexencode_hash =
-        base::HexEncode(sha256_hash.data(), sha256_hash.size());
-    if (oids_size > kMaxPolicyOids) {
-      PLOG(ERROR) << hexencode_hash << " has too many OIDs!";
-      return false;
-    } else if (oids_size < 1) {
-      PLOG(ERROR) << hexencode_hash << " has no OIDs!";
-      return false;
-    }
-    for (int i = 0; i < kMaxPolicyOids; i++) {
-      std::string oid;
-      if (i < oids_size) {
-        oid = anchor.ev_policy_oids(i);
-      }
-      string_to_write += "            \"" + oid + "\",\n";
-    }
-
-    // End struct
-    string_to_write += "        },\n";
-    string_to_write += "    },\n";
-  }
-  string_to_write += "};\n";
+      "static const EVMetadata kEvRootCaMetadata[] = {\n"
+      "    // need some dummy thing to make compiler happy, because\n"
+      "    // arraysize() is implemented as a convoluted template rather than\n"
+      "    // the traditional sizeof(x)/sizeof(*x)\n"
+      "    { { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n"
+      "          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } },\n"
+      "      {\n"
+      "        \"0\",\n"
+      "      }\n"
+      "    },\n"
+      "};\n";
   if (!base::WriteFile(cpp_path, string_to_write)) {
     PLOG(ERROR) << "Error writing cpp include file";
     return false;
